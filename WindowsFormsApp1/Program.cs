using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace WindowsFormsApp1
{
    static class Program
    {
        /// <summary>
        /// Главная точка входа для приложения.
        /// THE DAS SOFTWARE STUDIOS ©
        /// **all rights not reserved**
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new Views.Form1());
        }
    }
}


/* How it works??
 * 
 * Ну нахер на английском писать что-то сложно стало
 * Короче
 * 
 * Когда апа запускается то создается форма (она у нас пока одна)
 * У этой фрмы есть поля, одно из которых Презентер
 * соответственно презентер создается вместе с формой
 * 
 * Как тока форма получает нажатие на кнопку она шлет все что нужно Презентеру и все, больше ничего
 * презентер в свою очередь думает и должен думать че делать дальше, а вьюха максимально тупая должна быть
 * 
 * Поэтому у меня вьюха дает презентеру всю инфу в виде сторк, а презентер уже сам там валидирует и онвертирует
 * Если у него все ок - он пинает Сервис Лифта
 * 
 * Сервисы это вся бизнес логика приложения (бизнес логика == то что приложение должно делать вообще (то ради чего его создают))
 * Так вот наш сервис лифта и занимается лифтингом
 * Презентер через AddPerson дает ему нового человек и все, дальше может только спросить у Лифта, как у него дела
 * 
 * Так как Сервис лифта у нас многопоточный то хуй его знает, когда у лифта появится интересная инфа для презентера, 
 * поэтому милостивый лифт в конструктор получает ссылку на Презентера приведенную к интерфейсу Notify (уведомлений)
 * (Зчем нужны интерфейсы спроси отдельно, но посуди сам: вместо целого класса презентера с кучей методов я отдаю Лифту урезанную версию этого класса с конкретным списком методов указанным в интерфейсе INotifyAgent
 * То есть Лифт будет видеть только один метод, а не все, удобно и ничего случайно не сломается)
 * 
 * Так вот раз у Лифта есть ссылка на презентер, что он может ему в нужный момент сообщить, что у него что-то произошло путем вызова метода stateChanged()
 * Аргументов у него нет (но могли бы быть в общем виде) да они ему и не нужны! Цель метода - сказать презентеру, что у лифта есть что-то новое
 * 
 * Презентер получает новости вызывая соотвествующие функции внутри stateChanged()
 * А что делать Презентеру с новостями от Лифта? Правильно! Показывать их на вьюхе! 
 * (тут баг моей архитектуры ибо все это происходит в потоке лифта, а как бы не должно. Я мб еще подумаю как исправить, но пиши мы на кути - там все бы уже было заебсись)
 * 
 * Ну и в общем все.
 * 
 * Внутри потока лифта он что делат - он думает куда ехать
 * Этого я пока н написал, но я представляю это так: есть класс РешательКудаЕхатьДляЛифта и раз в секунду я его спрашиваю куда ехпть и еду
 * Когда добавляется новый Person то я вызываю метод НажатьКнопку(номер) для экземпляра класса РешательКудаЕхатьДляЛифта чтобы он знал куда мне вообще надо ехать
 * соответсвенно он там внутри себя думает куда быстрее, как лучше, сам отщелкивает кнопки когда приезжает на нужный этаж и проч
 * 
 * Так, там есть внутри потока цикл - это цикл событий, где я аналогично говорю всем Person'ам что лифт на таком-то этаже и Персон внутри себя в функции changeState в зависимости от своего текущего состояния решает че ему делать
 * типо конечный автомат
 * стоять ждать дальше, сменить состояние на "едущий" или на "приехавший (gaveUp (хз почему так назвал если что - поменяй))" ну и в конце на "удаленный"
 * 
 * там в задании было всякого говна типо "лифт стоит с открытой дверью" - это можно прикрутить в принципе, не вопрос, чуть подправить и добавить функционала в класс РешательКудаЕхатьДляЛифта чтобы он мог ответить "стой ты бля и открой двери"
 * 
 * ну и еще он там в цикле считает текущую массу людей с состоянием "едут в лифте" то есть он опказывает перегруз
 * но он едет с ним дальше, потому что в условии не сказано че делать в этой ситуации (или я слепой)
 * 
 * так же как в условии пропадает кнопка "стоп" пока кто-либо едет или ждет лифт
 * корректно завершается поток всегда (Thread.Join()) и даже в том случае если аппа закрывается на крестик
 * 
 * все наверное, документацию и коментраии блять целый час писал, эхэх
 */
